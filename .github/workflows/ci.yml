name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'

jobs:
  # Tests et linting Frontend
  frontend:
    name: Frontend (React Native)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: TripShare/package-lock.json
        
    - name: Install dependencies
      run: |
        cd TripShare
        npm ci
        
    - name: Lint frontend
      run: |
        cd TripShare
        npm run lint
        
    - name: Type check
      run: |
        cd TripShare
        npm run type-check
        
    - name: Run tests
      run: |
        cd TripShare
        npm test -- --coverage --watchAll=false
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: TripShare/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Tests et linting Backend
  backend:
    name: Backend (Go)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        
    - name: Lint backend
      run: |
        cd tripshare-backend
        golangci-lint run ./...
        
    - name: Run tests
      run: |
        cd tripshare-backend
        go test -race -coverprofile=coverage.out ./...
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: tripshare-backend/coverage.out
        flags: backend
        name: backend-coverage

  # Sécurité
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: TripShare/package-lock.json
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install dependencies
      run: |
        cd TripShare
        npm ci
        cd ../tripshare-backend
        go mod download
        
    - name: Audit npm packages
      run: |
        cd TripShare
        npm audit --audit-level=high
        
    - name: Scan Go vulnerabilities
      run: |
        cd tripshare-backend
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [frontend, backend, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: TripShare/package-lock.json
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install dependencies
      run: |
        cd TripShare
        npm ci
        cd ../tripshare-backend
        go mod download
        
    - name: Build backend
      run: |
        cd tripshare-backend
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w" -o bin/api ./cmd/api
        
    - name: Upload backend artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-binary
        path: tripshare-backend/bin/api
        
    - name: Build Docker image
      run: |
        cd tripshare-backend
        docker build -t tripshare-backend:${{ github.sha }} .
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: tripshare-backend/

  # Déploiement (seulement sur main)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-binary
        
    - name: Deploy to staging
      run: |
        echo "Déploiement vers staging..."
        # TODO: Implémenter le déploiement réel
        # - Upload vers serveur staging
        # - Redémarrage des services
        # - Tests de santé
        
    - name: Notify deployment
      run: |
        echo "Déploiement terminé avec succès!"
        # TODO: Notification Slack/Discord/Email
