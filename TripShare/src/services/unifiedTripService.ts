import { unifiedApi } from './unifiedApi';
import { tripShareApi } from './tripShareApi';

export interface UnifiedTripData {
  title: string;
  description: string;
  destination: string;
  photos: string[];
  duration: string;
  budget: string;
  startDate: string;
  endDate: string;
  isPublic: boolean;
  status: 'planned' | 'ongoing' | 'completed';
  difficulty?: string;
  tags: string[];
  places: Array<{
    name: string;
    description?: string;
    address?: string;
  }>;
}

export interface UnifiedTripResponse {
  id: string;
  title: string;
  status: 'success' | 'error';
  message: string;
  photos_uploaded: number;
  photos_failed: number;
}

/**
 * Service unifi√© pour la cr√©ation de voyages
 * Combine les bonnes pratiques des deux approches existantes
 */
class UnifiedTripService {
  
  /**
   * Cr√©e un voyage avec toutes les donn√©es et photos
   */
  async createTrip(tripData: UnifiedTripData): Promise<UnifiedTripResponse> {
    try {
      console.log('üöÄ UnifiedTripService - Cr√©ation du voyage:', tripData.title);
      
      // 1. Cr√©er le voyage de base avec toutes les donn√©es SAUF les photos
      const tripPayload = {
        title: tripData.title,
        description: tripData.description,
        start_date: tripData.startDate,
        end_date: tripData.endDate,
        location: this.parseDestination(tripData.destination),
        budget: this.parseBudget(tripData.budget),
        status: tripData.status,
        visibility: tripData.isPublic ? 'public' : 'private',
        photos: [], // ‚úÖ Pas de photos dans la cr√©ation initiale
        duration: tripData.duration,
        difficulty: tripData.difficulty,
        tags: tripData.tags,
        places_visited: tripData.places.map(place => ({
          name: place.name,
          description: place.description || '',
          address: place.address || '',
          is_visited: false,
          photos: [],
          notes: '',
        })),
      };

      console.log('üìù UnifiedTripService - Payload voyage:', tripPayload);
      
      const tripResponse = await unifiedApi.post<any>('/trips', tripPayload);
      
      if (!tripResponse.id) {
        throw new Error('Erreur lors de la cr√©ation du voyage');
      }

      console.log('‚úÖ UnifiedTripService - Voyage cr√©√© avec ID:', tripResponse.id);

      // 2. Uploader les photos une par une avec la m√©thode unifi√©e
      let photosUploaded = 0;
      let photosFailed = 0;
      
      if (tripData.photos && tripData.photos.length > 0) {
        console.log('üì∏ UnifiedTripService - Upload de', tripData.photos.length, 'photos...');
        
        for (let i = 0; i < tripData.photos.length; i++) {
          try {
            await this.uploadTripPhoto(tripResponse.id, tripData.photos[i], i === 0);
            photosUploaded++;
            console.log(`‚úÖ Photo ${i + 1}/${tripData.photos.length} upload√©e`);
          } catch (error: any) {
            photosFailed++;
            console.warn(`‚ö†Ô∏è Erreur upload photo ${i + 1}:`, error);
            
            // G√©rer les erreurs de mod√©ration
            if (error?.response?.status === 403) {
              console.error(`üö´ Photo ${i + 1} bloqu√©e par la mod√©ration`);
              // Continue avec les photos suivantes
            } else if (error?.response?.status === 202) {
              console.warn(`üö© Photo ${i + 1} flaggu√©e mais accept√©e`);
              photosUploaded++; // Compter comme r√©ussie
              photosFailed--; // Ne pas compter comme √©chou√©e
            }
          }
        }
      }

      return {
        id: tripResponse.id,
        title: tripData.title,
        status: 'success',
        message: `Voyage "${tripData.title}" cr√©√© avec succ√®s !`,
        photos_uploaded: photosUploaded,
        photos_failed: photosFailed,
      };

    } catch (error) {
      console.error('‚ùå UnifiedTripService - Erreur cr√©ation voyage:', error);
      return {
        id: '',
        title: tripData.title,
        status: 'error',
        message: 'Impossible de cr√©er le voyage. Veuillez r√©essayer.',
        photos_uploaded: 0,
        photos_failed: 0,
      };
    }
  }

  /**
   * Upload une photo pour un voyage (m√©thode unifi√©e)
   */
  private async uploadTripPhoto(tripId: string, photoUri: string, isMain: boolean = false): Promise<void> {
    try {
      console.log(`üîç UnifiedTripService - Upload photo pour voyage ${tripId}`);
      console.log(`üì∏ Photo URI: ${photoUri}`);
      
      // V√©rifier que l'URI est valide
      if (!photoUri || photoUri.startsWith('file://')) {
        console.log(`üì∏ Photo locale d√©tect√©e: ${photoUri}`);
      }
      
      // ‚úÖ M√âTHODE UNIFI√âE : Convertir l'URI en File compatible avec le backend
      const response = await fetch(photoUri);
      if (!response.ok) {
        throw new Error(`Erreur lors du fetch de l'image: ${response.status}`);
      }
      
      const blob = await response.blob();
      if (blob.size === 0) {
        throw new Error('Image vide ou corrompue');
      }
      
      const filename = `trip_${tripId}_${Date.now()}.jpg`;
      const file = new File([blob], filename, { type: 'image/jpeg' });
      
      console.log(`üìÅ Fichier cr√©√©: ${filename}, taille: ${blob.size} bytes`);
      
      // Cr√©er FormData avec le format attendu par le backend
      const formData = new FormData();
      formData.append('photo', file);
      formData.append('description', `Photo du voyage`);
      formData.append('title', `Photo ${isMain ? 'principale' : ''}`);
      formData.append('featured', isMain.toString());

      console.log(`üì§ Envoi FormData avec ${formData.getAll('photo').length} photo(s)`);

      // Utiliser l'API unifi√©e pour l'upload
      const result = await tripShareApi.uploadTripPhoto(tripId, formData);
      
      console.log(`‚úÖ UnifiedTripService - Photo upload√©e avec succ√®s:`, result);
    } catch (error: any) {
      console.error(`‚ùå UnifiedTripService - Erreur upload photo:`, error);
      console.error(`‚ùå D√©tails de l'erreur:`, error.message);
      if (error.response) {
        console.error(`‚ùå Status: ${error.response.status}`);
        console.error(`‚ùå Response:`, error.response.data);
      }
      throw error;
    }
  }

  /**
   * Parse la destination en format LocationJSON
   */
  private parseDestination(destination: string) {
    // Format simple pour l'instant - peut √™tre enrichi plus tard
    const parts = destination.split(',');
    return {
      city: parts[0]?.trim() || destination,
      country: parts[parts.length - 1]?.trim() || 'France',
      latitude: 0, // √Ä r√©cup√©rer via g√©ocodage si n√©cessaire
      longitude: 0,
    };
  }

  /**
   * Parse le budget en format num√©rique
   */
  private parseBudget(budget: string): number | undefined {
    const budgetMap: { [key: string]: number } = {
      'üí∏ Petit budget (< 500‚Ç¨)': 500,
      'üí∞ Budget moyen (500‚Ç¨ - 1500‚Ç¨)': 1000,
      'üíé Budget √©lev√© (1500‚Ç¨ - 3000‚Ç¨)': 2000,
      'üèÜ Budget illimit√© (> 3000‚Ç¨)': 5000,
      'üéØ Autre budget': 1000,
    };
    
    return budgetMap[budget];
  }
}

// Export du service unifi√©
export const unifiedTripService = new UnifiedTripService();
