import { useEffect, useRef } from 'react';
import { authService } from '../services/auth';
import { useSimpleAuth } from '../contexts/SimpleAuthContext';

export function useRequireAuth() {
  const hasCheckedRef = useRef(false);
  const { logout, isAuthenticated, user } = useSimpleAuth();

  useEffect(() => {
    const checkAuth = async () => {
      // √âviter les v√©rifications multiples
      if (hasCheckedRef.current) return;
      
      hasCheckedRef.current = true;
      
      try {
        console.log('üîç useRequireAuth - V√©rification:', { isAuthenticated, hasUser: !!user });
        
        // Si d√©j√† authentifi√© via le contexte, pas besoin de v√©rifier
        if (isAuthenticated && user) {
          console.log('‚úÖ useRequireAuth - Utilisateur d√©j√† authentifi√©');
          return;
        }
        
        // V√©rifier le token local
        const isAuth = authService.isAuthenticated();
        console.log('üîç useRequireAuth - Token local:', isAuth);
        
        if (!isAuth) {
          console.log('‚ùå useRequireAuth - Aucun token, d√©connexion');
          await logout();
          return;
        }

        // V√©rifier la validit√© du token avec le serveur seulement si n√©cessaire
        try {
          await authService.verifyToken();
          console.log('‚úÖ useRequireAuth - Token valide');
        } catch (error) {
          console.log('‚ùå useRequireAuth - Token invalide, d√©connexion');
          await logout();
        }
      } catch (error) {
        console.error('‚ùå useRequireAuth - Erreur:', error);
        await logout();
      }
    };
    
    checkAuth();
  }, []); // Pas de d√©pendances pour √©viter les re-ex√©cutions
} 